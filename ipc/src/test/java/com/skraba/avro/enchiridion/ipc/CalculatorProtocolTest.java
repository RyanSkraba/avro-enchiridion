package com.skraba.avro.enchiridion.ipc;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import org.apache.avro.ipc.LocalTransceiver;
import org.apache.avro.ipc.Responder;
import org.apache.avro.ipc.netty.NettyServer;
import org.apache.avro.ipc.netty.NettyTransceiver;
import org.apache.avro.ipc.specific.SpecificRequestor;
import org.apache.avro.ipc.specific.SpecificResponder;
import org.junit.jupiter.api.Test;

public class CalculatorProtocolTest {

  @Test
  public void testSpecificLocal() throws IOException {
    // Create the server side that knows how to respond to messages generated by the Calculator
    // protocol.
    Responder responder =
        new SpecificResponder(CalculatorProtocol.class, new CalculatorProtocolImpl());

    // Create the client side to make requests via the local transceiver.
    LocalTransceiver transceiver = new LocalTransceiver(responder);
    CalculatorProtocol calc = SpecificRequestor.getClient(CalculatorProtocol.class, transceiver);

    // Make the IPC requests
    assertThat(calc.add(1, 1), is(2d));
    assertThat(calc.subtract(4, 3), is(1d));
    assertThat(calc.multiply(0.5, 0.5), is(0.25d));
    assertThat(calc.divide(3, -2), is(-1.5d));
    assertThat(calc.log(3.14159).toString(), is("3.14159"));
  }

  @Test
  public void testNetty() throws IOException, InterruptedException {
    // Create the server side that knows how to respond to messages generated by the Calculator
    // protocol.
    NettyServer server =
        new NettyServer(
            new SpecificResponder(CalculatorProtocol.class, new CalculatorProtocolImpl()),
            new InetSocketAddress(0));
    server.start();
    int serverPort = server.getPort();

    // Create the client side to make requests via the local transceiver.
    NettyTransceiver transceiver =
        new NettyTransceiver(new InetSocketAddress(InetAddress.getLoopbackAddress(), serverPort));
    CalculatorProtocol calc = SpecificRequestor.getClient(CalculatorProtocol.class, transceiver);

    // Make the IPC requests
    assertThat(calc.add(1, 1), is(2d));
    assertThat(calc.subtract(4, 3), is(1d));
    assertThat(calc.multiply(0.5, 0.5), is(0.25d));
    assertThat(calc.divide(3, -2), is(-1.5d));
    assertThat(calc.log(3.14159).toString(), is("3.14159"));

    // Clean up the connections
    transceiver.close();
    server.close();
  }
}
